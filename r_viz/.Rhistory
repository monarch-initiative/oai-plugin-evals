select(-agent_answer_num_function_calls, -agent_answer) %>%
pivot_wider(names_from = agent_name, values_from = c(eval_valuation, url))
monarch4_vs_dummy4 <- data_wide %>%
filter(`eval_valuation_4 Base` > `eval_valuation_4 + Monarch`) %>%
select(module, question, goldstandard, `url_4 + Monarch`, `url_4 Base`) %>%
rename(`4 + Monarch Score` = `url_4 + Monarch`,
`4 Base Score` = `url_4 Base`)
gt(monarch4_vs_dummy4) %>%
tab_header("Questions where 4 Base outperformed 4 + Monarch") %>%
format_table()
dummy4_vs_dummy35 <- data_wide %>%
filter(`eval_valuation_4 Base` != `eval_valuation_3.5 Base`) %>%
arrange(`eval_valuation_4 Base` - `eval_valuation_3.5 Base`) %>%
select(module, question, goldstandard, `url_4 Base`, `url_3.5 Base`) %>%
rename(`4 Base Score` = `url_4 Base`,
`3.5 Base Score` = `url_3.5 Base`)
gt(dummy4_vs_dummy35) %>%
tab_header("Questions where 4 Base outperformed 4 + Monarch") %>%
format_table()
all_results <- data_wide %>%
# filter(`eval_valuation_4 Base` != `eval_valuation_3.5 Base`) %>%
# arrange(`eval_valuation_4 Base` - `eval_valuation_3.5 Base`) %>%
select(module, question, goldstandard, `url_4 Base`, `url_3.5 Base`, `url_4 + Monarch`, `url_3.5 + Monarch`) %>%
rename(`4 Base Score` = `url_4 Base`,
`3.5 Base Score` = `url_3.5 Base`,
`4 + Monarch Score` = `url_4 + Monarch`,
`3.5 + Monarch Score` = `url_3.5 + Monarch`
)
gt(all_results) %>%
tab_header("Questions where 4 Base outperformed 4 + Monarch") %>%
format_table()
all_results <- data_wide %>%
# filter(`eval_valuation_4 Base` != `eval_valuation_3.5 Base`) %>%
# arrange(`eval_valuation_4 Base` - `eval_valuation_3.5 Base`) %>%
select(module, question, goldstandard, `url_4 Base`, `url_3.5 Base`, `url_4 + Monarch`, `url_3.5 + Monarch`) %>%
rename(`4 Base Score` = `url_4 Base`,
`3.5 Base Score` = `url_3.5 Base`,
`4 + Monarch Score` = `url_4 + Monarch`,
`3.5 + Monarch Score` = `url_3.5 + Monarch`
)
gt(all_results) %>%
tab_header("Questions where 4 Base outperformed 4 + Monarch") %>%
tab_options(ihtml.active = TRUE, ihtml.use_compact_mode = TRUE, ihtml.use_filters = TRUE) %>%
format_table()
all_results <- data_wide %>%
# filter(`eval_valuation_4 Base` != `eval_valuation_3.5 Base`) %>%
# arrange(`eval_valuation_4 Base` - `eval_valuation_3.5 Base`) %>%
select(module, question, goldstandard, `url_4 Base`, `url_3.5 Base`, `url_4 + Monarch`, `url_3.5 + Monarch`) %>%
rename(`4 Base Score` = `url_4 Base`,
`3.5 Base Score` = `url_3.5 Base`,
`4 + Monarch Score` = `url_4 + Monarch`,
`3.5 + Monarch Score` = `url_3.5 + Monarch`
)
gt(all_results) %>%
tab_header("Questions where 4 Base outperformed 4 + Monarch") %>%
tab_options(ihtml.active = TRUE, ihtml.use_compact_mode = TRUE) %>%
format_table()
library(gt)
library(purrr)
library(glue)
data1 <- data %>%
mutate(url = 'https://github.com/monarch-initiative/oai-plugin-evals/blob/main/results/' %+% filename) %>%
mutate(
url = glue('eval_valuation (<a href="{url}" target="_blank">link</a>)'),
url = map(url, gt::md)) %>%
filter(module == "Gene alias" & (agent_name == "3.5 + Monarch" | agent_name == "4 + Monarch")) %>%
select(-agent_answer_num_function_calls, -module, -filename) %>%
mutate(agent_answer = map(agent_answer, gt::md)) %>%
pivot_wider(names_from = agent_name, values_from = c(url, eval_valuation, agent_answer)) %>%
filter(`eval_valuation_4 + Monarch` > `eval_valuation_3.5 + Monarch`) %>%
select(-`eval_valuation_3.5 + Monarch`, -`eval_valuation_4 + Monarch`) %>%
rename(`3.5 + Monarch Score` = `url_3.5 + Monarch`,
`4 + Monarch Score` = `url_4 + Monarch`,
`3.5 + Monarch Answer` = `agent_answer_3.5 + Monarch`,
`4 + Monarch Answer` = `agent_answer_4 + Monarch`)
format_table <- function(t) {
t %>%
tab_options(table.width = pct(100)) %>%
tab_options(data_row.padding = px(5),
table.font.size = "90%",
# 						ihtml.active = TRUE,
container.overflow.x = TRUE,
container.overflow.y = TRUE,
container.height = px(350))
}
gt(data1) %>%
tab_header("Gene alias questions where 4 + Monarch outperforms 3.5 + Monarch") %>%
format_table()
library(gt)
library(purrr)
library(glue)
data1 <- data %>%
mutate(url = 'https://github.com/monarch-initiative/oai-plugin-evals/blob/main/results/' %+% filename) %>%
mutate(
url = glue('{eval_valuation} (<a href="{url}" target="_blank">link</a>)'),
url = map(url, gt::md)) %>%
filter(module == "Gene alias" & (agent_name == "3.5 + Monarch" | agent_name == "4 + Monarch")) %>%
select(-agent_answer_num_function_calls, -module, -filename) %>%
mutate(agent_answer = map(agent_answer, gt::md)) %>%
pivot_wider(names_from = agent_name, values_from = c(url, eval_valuation, agent_answer)) %>%
filter(`eval_valuation_4 + Monarch` > `eval_valuation_3.5 + Monarch`) %>%
select(-`eval_valuation_3.5 + Monarch`, -`eval_valuation_4 + Monarch`) %>%
rename(`3.5 + Monarch Score` = `url_3.5 + Monarch`,
`4 + Monarch Score` = `url_4 + Monarch`,
`3.5 + Monarch Answer` = `agent_answer_3.5 + Monarch`,
`4 + Monarch Answer` = `agent_answer_4 + Monarch`)
format_table <- function(t) {
t %>%
tab_options(table.width = pct(100)) %>%
tab_options(data_row.padding = px(5),
table.font.size = "90%",
# 						ihtml.active = TRUE,
container.overflow.x = TRUE,
container.overflow.y = TRUE,
container.height = px(350))
}
gt(data1) %>%
tab_header("Gene alias questions where 4 + Monarch outperforms 3.5 + Monarch") %>%
format_table()
library(gt)
library(purrr)
library(glue)
data <- data %>%
mutate(url = 'https://github.com/monarch-initiative/oai-plugin-evals/blob/main/results/' %+% filename) %>%
mutate(
url = glue('<a href="{url}" target="_blank">{eval_valuation}</a>'),
url = map(url, gt::md))
data_wide <- separate(data, filename, into = c("dummy1", "dummy2", "dummy3", "q_id"), sep = "-|\\.") %>%
select(-dummy1, -dummy2, -dummy3) %>%
select(-agent_answer_num_function_calls, -agent_answer) %>%
pivot_wider(names_from = agent_name, values_from = c(eval_valuation, url))
monarch4_vs_dummy4 <- data_wide %>%
filter(`eval_valuation_4 Base` > `eval_valuation_4 + Monarch`) %>%
select(module, question, goldstandard, `url_4 + Monarch`, `url_4 Base`) %>%
rename(`4 + Monarch Score` = `url_4 + Monarch`,
`4 Base Score` = `url_4 Base`)
gt(monarch4_vs_dummy4) %>%
tab_header("Questions where 4 Base outperformed 4 + Monarch") %>%
format_table()
library(gt)
library(purrr)
library(glue)
data <- data %>%
mutate(url = 'https://github.com/monarch-initiative/oai-plugin-evals/blob/main/results/' %+% filename) %>%
mutate(
url = glue('{eval_valuation} (<a href="{url}" target="_blank">link</a>)'),
url = map(url, gt::md)) %>%
data_wide <- separate(data, filename, into = c("dummy1", "dummy2", "dummy3", "q_id"), sep = "-|\\.") %>%
select(-dummy1, -dummy2, -dummy3) %>%
select(-agent_answer_num_function_calls, -agent_answer) %>%
pivot_wider(names_from = agent_name, values_from = c(eval_valuation, url))
library(gt)
library(purrr)
library(glue)
data <- data %>%
mutate(url = 'https://github.com/monarch-initiative/oai-plugin-evals/blob/main/results/' %+% filename) %>%
mutate(
url = glue('{eval_valuation} (<a href="{url}" target="_blank">link</a>)'),
url = map(url, gt::md))
data_wide <- separate(data, filename, into = c("dummy1", "dummy2", "dummy3", "q_id"), sep = "-|\\.") %>%
select(-dummy1, -dummy2, -dummy3) %>%
select(-agent_answer_num_function_calls, -agent_answer) %>%
pivot_wider(names_from = agent_name, values_from = c(eval_valuation, url))
monarch4_vs_dummy4 <- data_wide %>%
filter(`eval_valuation_4 Base` > `eval_valuation_4 + Monarch`) %>%
select(module, question, goldstandard, `url_4 + Monarch`, `url_4 Base`) %>%
rename(`4 + Monarch Score` = `url_4 + Monarch`,
`4 Base Score` = `url_4 Base`)
gt(monarch4_vs_dummy4) %>%
tab_header("Questions where 4 Base outperformed 4 + Monarch") %>%
format_table()
dummy4_vs_dummy35 <- data_wide %>%
filter(`eval_valuation_4 Base` != `eval_valuation_3.5 Base`) %>%
arrange(`eval_valuation_4 Base` - `eval_valuation_3.5 Base`) %>%
select(module, question, goldstandard, `url_4 Base`, `url_3.5 Base`) %>%
rename(`4 Base Score` = `url_4 Base`,
`3.5 Base Score` = `url_3.5 Base`)
gt(dummy4_vs_dummy35) %>%
tab_header("Questions where 4 Base outperformed 4 + Monarch") %>%
format_table()
all_results <- data_wide %>%
# filter(`eval_valuation_4 Base` != `eval_valuation_3.5 Base`) %>%
# arrange(`eval_valuation_4 Base` - `eval_valuation_3.5 Base`) %>%
select(module, question, goldstandard, `url_4 Base`, `url_3.5 Base`, `url_4 + Monarch`, `url_3.5 + Monarch`) %>%
rename(`4 Base Score` = `url_4 Base`,
`3.5 Base Score` = `url_3.5 Base`,
`4 + Monarch Score` = `url_4 + Monarch`,
`3.5 + Monarch Score` = `url_3.5 + Monarch`
)
gt(all_results) %>%
tab_header("All questions and scores") %>%
tab_options(ihtml.active = TRUE, ihtml.use_compact_mode = TRUE) %>%
format_table()
all_results <- data_wide %>%
# filter(`eval_valuation_4 Base` != `eval_valuation_3.5 Base`) %>%
# arrange(`eval_valuation_4 Base` - `eval_valuation_3.5 Base`) %>%
select(module, question, goldstandard, `url_4 Base`, `url_3.5 Base`, `url_4 + Monarch`, `url_3.5 + Monarch`) %>%
rename(`4 Base Score` = `url_4 Base`,
`3.5 Base Score` = `url_3.5 Base`,
`4 + Monarch Score` = `url_4 + Monarch`,
`3.5 + Monarch Score` = `url_3.5 + Monarch`
)
gt(all_results) %>%
tab_header("All questions and scores") %>%
tab_options(ihtml.active = TRUE, ihtml.use_compact_mode = TRUE, ihtml.use_filters = TRUE, ihtml.use_pagination = FALSE) %>%
format_table()
all_results <- data_wide %>%
# filter(`eval_valuation_4 Base` != `eval_valuation_3.5 Base`) %>%
# arrange(`eval_valuation_4 Base` - `eval_valuation_3.5 Base`) %>%
select(module, question, goldstandard, `url_4 Base`, `url_3.5 Base`, `url_4 + Monarch`, `url_3.5 + Monarch`) %>%
rename(`4 Base Score` = `url_4 Base`,
`3.5 Base Score` = `url_3.5 Base`,
`4 + Monarch Score` = `url_4 + Monarch`,
`3.5 + Monarch Score` = `url_3.5 + Monarch`
)
gt(all_results) %>%
tab_header("All questions and scores") %>%
tab_options(ihtml.active = TRUE, ihtml.use_compact_mode = TRUE, ihtml.use_filters = TRUE, ihtml.use_pagination = FALSE, ihtml.use_search = TRUE) %>%
format_table() %>%
tab_options(container.height = px(600), table.font.size = "90%"
)
library(ggplot2)
# Function to create spiral arm points
create_spiral_arms <- function(arm_count, points_per_arm) {
arms <- vector("list", arm_count)
for (i in 1:arm_count) {
theta <- seq(0, 4 * pi, length.out = points_per_arm)
radius <- sqrt(seq(0, 1, length.out = points_per_arm)) + rnorm(points_per_arm, 0, 0.02)
theta <- theta + i * 2 * pi / arm_count
x <- radius * cos(theta)
y <- radius * sin(theta)
arms[[i]] <- data.frame(x = x, y = y)
}
do.call(rbind, arms)
}
# Generate the spiral arms
set.seed(42) # For reproducibility
arm_count <- 2 # Number of arms
points_per_arm <- 500 # Number of points per arm
spiral_arms <- create_spiral_arms(arm_count, points_per_arm)
# Create the ggplot
p <- ggplot(spiral_arms, aes(x, y)) +
geom_point(alpha = 0.5) +
coord_fixed() +
theme_void() +
theme(plot.background = element_rect(fill = "black"),
panel.background = element_rect(fill = "black"),
plot.margin = unit(rep(-1, 4), "cm"))
# Show the plot
print(p)
library(ggplot2)
# Function to create spiral arm points
create_spiral_arms <- function(arm_count, points_per_arm) {
arms <- vector("list", arm_count)
for (i in 1:arm_count) {
theta <- seq(0, 4 * pi, length.out = points_per_arm)
radius <- sqrt(seq(0, 1, length.out = points_per_arm)) + rnorm(points_per_arm, 0, 0.02)
theta <- theta + i * 2 * pi / arm_count
x <- radius * cos(theta)
y <- radius * sin(theta)
arms[[i]] <- data.frame(x = x, y = y)
}
do.call(rbind, arms)
}
# Generate the spiral arms
set.seed(42) # For reproducibility
arm_count <- 2 # Number of arms
points_per_arm <- 500 # Number of points per arm
spiral_arms <- create_spiral_arms(arm_count, points_per_arm)
# Create the ggplot
p <- ggplot(spiral_arms, aes(x, y)) +
geom_point(alpha = 0.5) +
coord_fixed()
p
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
source("load.R")
library(tidyr)
library(dplyr)
library(ggplot2)
data <- data %>%
mutate(agent_name = factor(agent_name,
levels = c("Dummy Agent GPT35", "Dummy Agent GPT4", "Monarch Assistant GPT35", "Monarch Assistant GPT4"),
labels = c("3.5 Base", "4 Base", "3.5 + Monarch", "4 + Monarch"),
ordered = TRUE))
data_grouped <- data %>%
mutate(eval_valuation =  case_when(eval_valuation == 1 ~ "1.0",
eval_valuation == 0 ~ "0.0",
0 < eval_valuation & eval_valuation <= 1/3 ~ "(0, 1/3]",
1/3 < eval_valuation & eval_valuation <= 2/3 ~ "(1/3, 2/3]",
2/3 < eval_valuation & eval_valuation < 1 ~ "(2/3, 1)",
.default = NA
)) %>%
mutate(eval_valuation = factor(eval_valuation, levels = c("0.0", "(0, 1/3]", "(1/3, 2/3]", "(2/3, 1)", "1.0"), ordered = TRUE))
data_grouped <- data_grouped %>%
group_by(module, agent_name, eval_valuation) %>%
summarize(count = n()) %>%
ungroup() %>%
complete(module, agent_name, eval_valuation, fill = list(count = 0)) %>%
arrange(agent_name, module) %>%
mutate(agent_name = factor(agent_name,
levels = c("4 + Monarch", "3.5 + Monarch", "4 Base", "3.5 Base"),
ordered = TRUE))
ggplot(data_grouped, aes(x=eval_valuation, y=count, fill=eval_valuation)) +
geom_bar(stat="identity") +
facet_grid(module ~ agent_name) +
theme_minimal() +
labs(title="Score distributions by task and agent type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_y_continuous(limits = c(0, 50), name = "Count of Questions") +
scale_x_discrete(name = "Score Bucket") +
guides(fill = "none")
library(tidyr)
library(dplyr)
library(ggplot2)
data <- data %>%
mutate(agent_name = factor(agent_name,
levels = c("Dummy Agent GPT35", "Dummy Agent GPT4", "Monarch Assistant GPT35", "Monarch Assistant GPT4"),
labels = c("3.5 Base", "4 Base", "3.5 + Monarch", "4 + Monarch"),
ordered = TRUE))
data_grouped <- data %>%
mutate(eval_valuation =  case_when(eval_valuation == 1 ~ "1.0",
eval_valuation == 0 ~ "0.0",
0 < eval_valuation & eval_valuation <= 1/3 ~ "(0, 1/3]",
1/3 < eval_valuation & eval_valuation <= 2/3 ~ "(1/3, 2/3]",
2/3 < eval_valuation & eval_valuation < 1 ~ "(2/3, 1)",
.default = NA
)) %>%
mutate(eval_valuation = factor(eval_valuation, levels = c("0.0", "(0, 1/3]", "(1/3, 2/3]", "(2/3, 1)", "1.0"), ordered = TRUE))
data_grouped <- data_grouped %>%
group_by(module, agent_name, eval_valuation) %>%
summarize(count = n()) %>%
ungroup() %>%
complete(module, agent_name, eval_valuation, fill = list(count = 0)) %>%
arrange(agent_name, module) %>%
mutate(agent_name = factor(agent_name,
levels = c("4 + Monarch", "3.5 + Monarch", "4 Base", "3.5 Base"),
ordered = TRUE),
module = factor(module,
levels = c("Gene disease association", "Gene alias"),
labels = c("Gene/Disease (Jaccard)", "Gene Alias (% Hit)"),
ordered = TRUE))
ggplot(data_grouped, aes(x=eval_valuation, y=count, fill=eval_valuation)) +
geom_bar(stat="identity") +
facet_grid(module ~ agent_name) +
theme_minimal() +
labs(title="Score distributions by task and agent type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_y_continuous(limits = c(0, 50), name = "Count of Questions") +
scale_x_discrete(name = "Score Bucket") +
guides(fill = "none")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
source("load.R")
library(tidyr)
library(dplyr)
library(ggplot2)
data <- data %>%
mutate(agent_name = factor(agent_name,
levels = c("Dummy Agent GPT35", "Dummy Agent GPT4", "Monarch Assistant GPT35", "Monarch Assistant GPT4"),
labels = c("3.5 Base", "4 Base", "3.5 + Monarch", "4 + Monarch"),
ordered = TRUE))
data_grouped <- data %>%
mutate(eval_valuation =  case_when(eval_valuation == 1 ~ "1.0",
eval_valuation == 0 ~ "0.0",
0 < eval_valuation & eval_valuation <= 1/3 ~ "(0, 1/3]",
1/3 < eval_valuation & eval_valuation <= 2/3 ~ "(1/3, 2/3]",
2/3 < eval_valuation & eval_valuation < 1 ~ "(2/3, 1)",
.default = NA
)) %>%
mutate(eval_valuation = factor(eval_valuation, levels = c("0.0", "(0, 1/3]", "(1/3, 2/3]", "(2/3, 1)", "1.0"), ordered = TRUE))
data_grouped2 <- data_grouped %>%
group_by(module, agent_name, eval_valuation) %>%
summarize(count = n()) %>%
ungroup() %>%
complete(module, agent_name, eval_valuation, fill = list(count = 0)) %>%
arrange(agent_name, module) %>%
mutate(agent_name = factor(agent_name,
levels = c("4 + Monarch", "3.5 + Monarch", "4 Base", "3.5 Base"),
ordered = TRUE),
module = factor(module,
levels = c("Gene disease association", "Gene alias"),
labels = c("Gene/Disease (Jaccard)", "Gene Alias (% Hit)"),
ordered = TRUE))
ggplot(data_grouped2, aes(x=eval_valuation, y=count, fill=eval_valuation)) +
geom_bar(stat="identity") +
facet_grid(module ~ agent_name) +
theme_minimal() +
labs(title="Score distributions by task and agent type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_y_continuous(limits = c(0, 50), name = "Count of Questions") +
scale_x_discrete(name = "Score Bucket") +
guides(fill = "none")
library(tidyr)
library(dplyr)
library(ggplot2)
data <- data %>%
mutate(agent_name = factor(agent_name,
levels = c("Dummy Agent GPT35", "Dummy Agent GPT4", "Monarch Assistant GPT35", "Monarch Assistant GPT4"),
labels = c("3.5 Base", "4 Base", "3.5 + Monarch", "4 + Monarch"),
ordered = TRUE))
data_grouped <- data %>%
mutate(eval_valuation =  case_when(eval_valuation == 1 ~ "1.0",
eval_valuation == 0 ~ "0.0",
0 < eval_valuation & eval_valuation <= 1/3 ~ "(0, 1/3]",
1/3 < eval_valuation & eval_valuation <= 2/3 ~ "(1/3, 2/3]",
2/3 < eval_valuation & eval_valuation < 1 ~ "(2/3, 1)",
.default = NA
)) %>%
mutate(eval_valuation = factor(eval_valuation, levels = c("0.0", "(0, 1/3]", "(1/3, 2/3]", "(2/3, 1)", "1.0"), ordered = TRUE))
data_grouped2 <- data_grouped %>%
group_by(module, agent_name, eval_valuation) %>%
summarize(count = n()) %>%
ungroup() %>%
complete(module, agent_name, eval_valuation, fill = list(count = 0)) %>%
arrange(agent_name, module) %>%
mutate(agent_name = factor(agent_name,
levels = c("4 + Monarch", "3.5 + Monarch", "4 Base", "3.5 Base"),
ordered = TRUE),
module = factor(module,
levels = c("Gene disease association", "Gene alias"),
labels = c("Gene/Disease (% Hit)", "Gene Alias (Jaccard)"),
ordered = TRUE))
ggplot(data_grouped2, aes(x=eval_valuation, y=count, fill=eval_valuation)) +
geom_bar(stat="identity") +
facet_grid(module ~ agent_name) +
theme_minimal() +
labs(title="Score distributions by task and agent type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_y_continuous(limits = c(0, 50), name = "Count of Questions") +
scale_x_discrete(name = "Score Bucket") +
guides(fill = "none")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
source("load.R")
library(tidyr)
library(dplyr)
library(ggplot2)
data <- data %>%
mutate(agent_name = factor(agent_name,
levels = c("Dummy Agent GPT35", "Dummy Agent GPT4", "Monarch Assistant GPT35", "Monarch Assistant GPT4"),
labels = c("3.5 Base", "4 Base", "3.5 + Monarch", "4 + Monarch"),
ordered = TRUE))
data_grouped <- data %>%
mutate(eval_valuation =  case_when(eval_valuation == 1 ~ "1.0",
eval_valuation == 0 ~ "0.0",
0 < eval_valuation & eval_valuation <= 1/3 ~ "(0, 1/3]",
1/3 < eval_valuation & eval_valuation <= 2/3 ~ "(1/3, 2/3]",
2/3 < eval_valuation & eval_valuation < 1 ~ "(2/3, 1)",
.default = NA
)) %>%
mutate(eval_valuation = factor(eval_valuation, levels = c("0.0", "(0, 1/3]", "(1/3, 2/3]", "(2/3, 1)", "1.0"), ordered = TRUE))
data_grouped2 <- data_grouped %>%
group_by(module, agent_name, eval_valuation) %>%
summarize(count = n()) %>%
ungroup() %>%
complete(module, agent_name, eval_valuation, fill = list(count = 0)) %>%
arrange(agent_name, module) %>%
mutate(agent_name = factor(agent_name,
levels = c("4 + Monarch", "3.5 + Monarch", "4 Base", "3.5 Base"),
ordered = TRUE),
module = factor(module,
levels = c("Gene disease association", "Gene alias"),
labels = c("Gene/Disease (% Hit)", "Gene Alias (Jaccard)"),
ordered = TRUE))
ggplot(data_grouped2, aes(x=eval_valuation, y=count, fill=eval_valuation)) +
geom_bar(stat="identity") +
facet_grid(module ~ agent_name) +
theme_minimal() +
labs(title="Score distributions by task and agent type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_y_continuous(limits = c(0, 50), name = "Count of Questions") +
scale_x_discrete(name = "Score Bucket") +
guides(fill = "none")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
source("load.R")
library(tidyr)
library(dplyr)
library(ggplot2)
data <- data %>%
mutate(agent_name = factor(agent_name,
levels = c("Dummy Agent GPT35", "Dummy Agent GPT4", "Monarch Assistant GPT35", "Monarch Assistant GPT4"),
labels = c("3.5 Base", "4 Base", "3.5 + Monarch", "4 + Monarch"),
ordered = TRUE))
data_grouped <- data %>%
mutate(eval_valuation =  case_when(eval_valuation == 1 ~ "1.0",
eval_valuation == 0 ~ "0.0",
0 < eval_valuation & eval_valuation <= 1/3 ~ "(0, 1/3]",
1/3 < eval_valuation & eval_valuation <= 2/3 ~ "(1/3, 2/3]",
2/3 < eval_valuation & eval_valuation < 1 ~ "(2/3, 1)",
.default = NA
)) %>%
mutate(eval_valuation = factor(eval_valuation, levels = c("0.0", "(0, 1/3]", "(1/3, 2/3]", "(2/3, 1)", "1.0"), ordered = TRUE))
data_grouped2 <- data_grouped %>%
group_by(module, agent_name, eval_valuation) %>%
summarize(count = n()) %>%
ungroup() %>%
complete(module, agent_name, eval_valuation, fill = list(count = 0)) %>%
arrange(agent_name, module) %>%
mutate(agent_name = factor(agent_name,
levels = c("4 + Monarch", "3.5 + Monarch", "4 Base", "3.5 Base"),
ordered = TRUE),
module = factor(module,
levels = c("Gene disease association", "Gene alias"),
labels = c("Gene/Disease (% Hit)", "Gene Alias (Jaccard)"),
ordered = TRUE))
ggplot(data_grouped2, aes(x=eval_valuation, y=count, fill=eval_valuation)) +
geom_bar(stat="identity") +
facet_grid(module ~ agent_name) +
theme_minimal() +
labs(title="Score distributions by task and agent type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_y_continuous(limits = c(0, 50), name = "Count of Questions") +
scale_x_discrete(name = "Score") +
guides(fill = "none")
